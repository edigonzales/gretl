/**
 * SourceSets are only responsible for compiling source code,
 * but do not deal with executing the byte code (= the tests).
 * We need to create a 'functionalTest(type: Test)' task.
 */
sourceSets {
    integrationTest {
        java.srcDir 'src/integrationTest/java'
        resources.srcDir 'src/integrationTest/resources'
    }
}

/**
 * Task for executing the integration tests. It references the 
 * classes and runtime classpath of the integration test source set.
 */
task jarTest(type: Test) {
    description = 'Runs integration tests against the installed gretl jar.'
    group = LifecycleBasePlugin.VERIFICATION_GROUP

    useJUnit {
        excludeCategories 'ch.so.agi.gretl.testutil.DbDriversReachableTest'
        excludeCategories 'ch.so.agi.gretl.testutil.S3Test'
    }

    systemProperty('GRETL_TESTTYPE', 'jar')

    // show standard out and standard error of the test JVM(s) on the console
    //testLogging.showStandardStreams = System.getenv('TRAVIS')=='true'
    testLogging.showStandardStreams = true

    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath += sourceSets.integrationTest.runtimeClasspath //+ sourceSets.main.runtimeClasspath
    jvmArgs '-Xmx1g'
}

task jarS3Test(type: Test) {
    description = 'Runs the S3 integration tests against the installed gretl jar.'
    group = LifecycleBasePlugin.VERIFICATION_GROUP

    useJUnit {
        includeCategories 'ch.so.agi.gretl.testutil.S3Test'
    }

    systemProperty('GRETL_TESTTYPE', 'jar')

    testLogging.showStandardStreams = true

    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath += sourceSets.integrationTest.runtimeClasspath //+ sourceSets.main.runtimeClasspath
    jvmArgs '-Xmx1g'
}


jarTest {
    filter {
        //includeTestsMatching "ch.so.agi.gretl.jobs.CsvExportTest"    
        //includeTestsMatching "ch.so.agi.gretl.jobs.CsvImportTest"    
        //includeTestsMatching "ch.so.agi.gretl.jobs.CsvValidatorTest"    
        //includeTestsMatching "ch.so.agi.gretl.jobs.Db2DbTaskTest"   
        //includeTestsMatching "ch.so.agi.gretl.jobs.IliValidatorTest"        
        //includeTestsMatching "ch.so.agi.gretl.jobs.ShpExportTest"    
        //includeTestsMatching "ch.so.agi.gretl.jobs.ShpImportTest"    
        //includeTestsMatching "ch.so.agi.gretl.jobs.ShpValidatorTest"    
        //includeTestsMatching "ch.so.agi.gretl.jobs.SqlExecutorTaskTest"    
        //includeTestsMatching "ch.so.agi.gretl.jobs.IliRepositorizerTest"    
        //includeTestsMatching "ch.so.agi.gretl.jobs.PostgisRasterExportTest"    
    }
}

task imageTest(type: Test){
    description = 'Runs integration tests against the installed gretl docker image.'
    group = LifecycleBasePlugin.VERIFICATION_GROUP
    
    useJUnit {
        excludeCategories 'ch.so.agi.gretl.testutil.DbDriversReachableTest' // FIXME / TODO    
        excludeCategories 'ch.so.agi.gretl.testutil.S3Test'
        excludeCategories 'ch.so.agi.gretl.testutil.ThirdPartyPluginTest'
    }
    
    systemProperty('GRETL_TESTTYPE', 'image')

    testLogging.showStandardStreams = true

    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath += sourceSets.integrationTest.runtimeClasspath //+ sourceSets.main.runtimeClasspath
}

task imageS3Test(type: Test){
    description = 'Runs S3 integration tests against the installed gretl docker image.'
    group = LifecycleBasePlugin.VERIFICATION_GROUP

    useJUnit {
        includeCategories 'ch.so.agi.gretl.testutil.S3Test'
    }

    systemProperty('GRETL_TESTTYPE', 'image')

    testLogging.showStandardStreams = true

    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath += sourceSets.integrationTest.runtimeClasspath //+ sourceSets.main.runtimeClasspath
}

task thirdPartyPluginImageTest(type: Test) {
    description = 'Runs integration tests with 3rd party plugins against the installed gretl docker image.'
    group = LifecycleBasePlugin.VERIFICATION_GROUP

    useJUnit {
        includeCategories 'ch.so.agi.gretl.testutil.ThirdPartyPluginTest'
    }

    systemProperty('GRETL_TESTTYPE', 'image')

    testLogging.showStandardStreams = true

    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath += sourceSets.integrationTest.runtimeClasspath //+ sourceSets.main.runtimeClasspath
}

imageTest {
    filter {
        //includeTestsMatching "ch.so.agi.gretl.jobs.CsvExportTest"    
        //includeTestsMatching "ch.so.agi.gretl.jobs.CsvImportTest"    
        //includeTestsMatching "ch.so.agi.gretl.jobs.CsvValidatorTest"    
        //includeTestsMatching "ch.so.agi.gretl.jobs.Db2DbTaskTest"   
        //includeTestsMatching "ch.so.agi.gretl.jobs.IliValidatorTest"        
        //includeTestsMatching "ch.so.agi.gretl.jobs.ShpExportTest"    
        //includeTestsMatching "ch.so.agi.gretl.jobs.ShpImportTest"    
        //includeTestsMatching "ch.so.agi.gretl.jobs.ShpValidatorTest"    
        //includeTestsMatching "ch.so.agi.gretl.jobs.SqlExecutorTaskTest"    
        //includeTestsMatching "ch.so.agi.gretl.jobs.DbDriverContainedTest"    
        //includeTestsMatching "ch.so.agi.gretl.jobs.IliRepositorizerTest"
        //includeTestsMatching "ch.so.agi.gretl.jobs.PostgisRasterExportTest"                        
    }
}