apply from: '../dependencies.gradle'
apply plugin: 'java-library'

configurations {
    api {
        exclude module: 'xmlparserv2'
        exclude module: 'ucp'
        exclude module: 'xdb6'
        exclude module: 'oraclepki'
        exclude module: 'osdt_core'
        exclude module: 'osdt_cert'
    }  
}

configurations.all {
    resolutionStrategy { 
        force 'ch.interlis:ili2c-tool:5.6.0' 
        force 'ch.interlis:ili2c-core:5.6.0'
        force 'ch.interlis:ili2gpkg:5.2.0'
        force 'ch.interlis:iox-ili:1.23.2'
    }
}

dependencies {
    api 'ch.so.agi:gretl:2.4.+'

    // Add 3rd party libs which we want in the docker image.
    api 'de.undercouch:gradle-download-task:4.1.2'
    api 'org.hidetake:gradle-ssh-plugin:2.9.0'
    api 'jp.classmethod.aws:gradle-aws-plugin:0.41'

    // Add ilivalidator custom functions
    // Weil die Funktionen jetzt nicht mit dem Plugin-Mechanismus
    // von ilivalidator geladen werden, sondern vom vom GRETL-Task
    // (noch hardcodiert), braucht es dieses Deployment nicht mehr.
    // Falls es funktionieren sollte, muss auch das Dockerfile 
    // wieder angepasst werden, damit diese Abh√§ngigkeit in das
    // plugin-Verzeichnis beim Builden des Images kopiert wird.
    // api 'ch.so.agi.ilivalidator:ilivalidator-custom-functions:1.1.7'
    
    // Gretl has no oracle dependency: If someone wants to use
    // Gretl but does not have a oracle account, he cannot run
    // Gretl... We copy the jdbc jar into the docker image, our
    // gret-runtime artifact.
    api oracleDependency
}

task stageJars(type: Copy) {
    description = 'Copies all jars required by gretl to the temp folder __jars4image.'
    from configurations.compileClasspath
    from configurations.runtimeClasspath
    into "gretl/__jars4image"
}
